#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Presentation_Layer.DBML
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IspDB")]
	public partial class AdminDBMLDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdminTable(AdminTable instance);
    partial void UpdateAdminTable(AdminTable instance);
    partial void DeleteAdminTable(AdminTable instance);
    partial void InsertCustomerAmountTable(CustomerAmountTable instance);
    partial void UpdateCustomerAmountTable(CustomerAmountTable instance);
    partial void DeleteCustomerAmountTable(CustomerAmountTable instance);
    partial void InsertCustomerContactTable(CustomerContactTable instance);
    partial void UpdateCustomerContactTable(CustomerContactTable instance);
    partial void DeleteCustomerContactTable(CustomerContactTable instance);
    partial void InsertCustomerLocationTable(CustomerLocationTable instance);
    partial void UpdateCustomerLocationTable(CustomerLocationTable instance);
    partial void DeleteCustomerLocationTable(CustomerLocationTable instance);
    partial void InsertCustomerNetInfoTAble(CustomerNetInfoTAble instance);
    partial void UpdateCustomerNetInfoTAble(CustomerNetInfoTAble instance);
    partial void DeleteCustomerNetInfoTAble(CustomerNetInfoTAble instance);
    partial void InsertCustomerPaidTable(CustomerPaidTable instance);
    partial void UpdateCustomerPaidTable(CustomerPaidTable instance);
    partial void DeleteCustomerPaidTable(CustomerPaidTable instance);
    partial void InsertCutomerNameTable(CutomerNameTable instance);
    partial void UpdateCutomerNameTable(CutomerNameTable instance);
    partial void DeleteCutomerNameTable(CutomerNameTable instance);
    partial void InsertEmployeeContactInfoTable(EmployeeContactInfoTable instance);
    partial void UpdateEmployeeContactInfoTable(EmployeeContactInfoTable instance);
    partial void DeleteEmployeeContactInfoTable(EmployeeContactInfoTable instance);
    partial void InsertEmployeeJoinDateTable(EmployeeJoinDateTable instance);
    partial void UpdateEmployeeJoinDateTable(EmployeeJoinDateTable instance);
    partial void DeleteEmployeeJoinDateTable(EmployeeJoinDateTable instance);
    partial void InsertEmployeeNameTable(EmployeeNameTable instance);
    partial void UpdateEmployeeNameTable(EmployeeNameTable instance);
    partial void DeleteEmployeeNameTable(EmployeeNameTable instance);
    partial void InsertEmployeeSalaryManage(EmployeeSalaryManage instance);
    partial void UpdateEmployeeSalaryManage(EmployeeSalaryManage instance);
    partial void DeleteEmployeeSalaryManage(EmployeeSalaryManage instance);
    partial void InsertEmployeeSalaryTable(EmployeeSalaryTable instance);
    partial void UpdateEmployeeSalaryTable(EmployeeSalaryTable instance);
    partial void DeleteEmployeeSalaryTable(EmployeeSalaryTable instance);
    partial void InsertEmployeeSalaryUpdateTable(EmployeeSalaryUpdateTable instance);
    partial void UpdateEmployeeSalaryUpdateTable(EmployeeSalaryUpdateTable instance);
    partial void DeleteEmployeeSalaryUpdateTable(EmployeeSalaryUpdateTable instance);
    partial void InsertExpenTable(ExpenTable instance);
    partial void UpdateExpenTable(ExpenTable instance);
    partial void DeleteExpenTable(ExpenTable instance);
    partial void InsertPackagetable(Packagetable instance);
    partial void UpdatePackagetable(Packagetable instance);
    partial void DeletePackagetable(Packagetable instance);
    #endregion
		
		public AdminDBMLDataContext() : 
				base(global::Presentation_Layer.Properties.Settings.Default.IspDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public AdminDBMLDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdminDBMLDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdminDBMLDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public AdminDBMLDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<AdminTable> AdminTables
		{
			get
			{
				return this.GetTable<AdminTable>();
			}
		}
		
		public System.Data.Linq.Table<CustomerAmountTable> CustomerAmountTables
		{
			get
			{
				return this.GetTable<CustomerAmountTable>();
			}
		}
		
		public System.Data.Linq.Table<CustomerContactTable> CustomerContactTables
		{
			get
			{
				return this.GetTable<CustomerContactTable>();
			}
		}
		
		public System.Data.Linq.Table<CustomerLocationTable> CustomerLocationTables
		{
			get
			{
				return this.GetTable<CustomerLocationTable>();
			}
		}
		
		public System.Data.Linq.Table<CustomerNetInfoTAble> CustomerNetInfoTAbles
		{
			get
			{
				return this.GetTable<CustomerNetInfoTAble>();
			}
		}
		
		public System.Data.Linq.Table<CustomerPaidTable> CustomerPaidTables
		{
			get
			{
				return this.GetTable<CustomerPaidTable>();
			}
		}
		
		public System.Data.Linq.Table<CutomerNameTable> CutomerNameTables
		{
			get
			{
				return this.GetTable<CutomerNameTable>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeContactInfoTable> EmployeeContactInfoTables
		{
			get
			{
				return this.GetTable<EmployeeContactInfoTable>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeJoinDateTable> EmployeeJoinDateTables
		{
			get
			{
				return this.GetTable<EmployeeJoinDateTable>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeNameTable> EmployeeNameTables
		{
			get
			{
				return this.GetTable<EmployeeNameTable>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeSalaryManage> EmployeeSalaryManages
		{
			get
			{
				return this.GetTable<EmployeeSalaryManage>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeSalaryTable> EmployeeSalaryTables
		{
			get
			{
				return this.GetTable<EmployeeSalaryTable>();
			}
		}
		
		public System.Data.Linq.Table<EmployeeSalaryUpdateTable> EmployeeSalaryUpdateTables
		{
			get
			{
				return this.GetTable<EmployeeSalaryUpdateTable>();
			}
		}
		
		public System.Data.Linq.Table<ExpenTable> ExpenTables
		{
			get
			{
				return this.GetTable<ExpenTable>();
			}
		}
		
		public System.Data.Linq.Table<Packagetable> Packagetables
		{
			get
			{
				return this.GetTable<Packagetable>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AdminTable")]
	public partial class AdminTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _AdminName;
		
		private string _AdminUserName;
		
		private string _AdminPassword;
		
		private System.DateTime _AdminDOB;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAdminNameChanging(string value);
    partial void OnAdminNameChanged();
    partial void OnAdminUserNameChanging(string value);
    partial void OnAdminUserNameChanged();
    partial void OnAdminPasswordChanging(string value);
    partial void OnAdminPasswordChanged();
    partial void OnAdminDOBChanging(System.DateTime value);
    partial void OnAdminDOBChanged();
    #endregion
		
		public AdminTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminName
		{
			get
			{
				return this._AdminName;
			}
			set
			{
				if ((this._AdminName != value))
				{
					this.OnAdminNameChanging(value);
					this.SendPropertyChanging();
					this._AdminName = value;
					this.SendPropertyChanged("AdminName");
					this.OnAdminNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminUserName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminUserName
		{
			get
			{
				return this._AdminUserName;
			}
			set
			{
				if ((this._AdminUserName != value))
				{
					this.OnAdminUserNameChanging(value);
					this.SendPropertyChanging();
					this._AdminUserName = value;
					this.SendPropertyChanged("AdminUserName");
					this.OnAdminUserNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminPassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string AdminPassword
		{
			get
			{
				return this._AdminPassword;
			}
			set
			{
				if ((this._AdminPassword != value))
				{
					this.OnAdminPasswordChanging(value);
					this.SendPropertyChanging();
					this._AdminPassword = value;
					this.SendPropertyChanged("AdminPassword");
					this.OnAdminPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdminDOB", DbType="Date NOT NULL")]
		public System.DateTime AdminDOB
		{
			get
			{
				return this._AdminDOB;
			}
			set
			{
				if ((this._AdminDOB != value))
				{
					this.OnAdminDOBChanging(value);
					this.SendPropertyChanging();
					this._AdminDOB = value;
					this.SendPropertyChanged("AdminDOB");
					this.OnAdminDOBChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerAmountTable")]
	public partial class CustomerAmountTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private double _CustomerAmount;
		
		private int _CustomerID;
		
		private EntitySet<CutomerNameTable> _CutomerNameTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerAmountChanging(double value);
    partial void OnCustomerAmountChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public CustomerAmountTable()
		{
			this._CutomerNameTables = new EntitySet<CutomerNameTable>(new Action<CutomerNameTable>(this.attach_CutomerNameTables), new Action<CutomerNameTable>(this.detach_CutomerNameTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerAmount", DbType="Float NOT NULL")]
		public double CustomerAmount
		{
			get
			{
				return this._CustomerAmount;
			}
			set
			{
				if ((this._CustomerAmount != value))
				{
					this.OnCustomerAmountChanging(value);
					this.SendPropertyChanging();
					this._CustomerAmount = value;
					this.SendPropertyChanged("CustomerAmount");
					this.OnCustomerAmountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerAmountTable_CutomerNameTable", Storage="_CutomerNameTables", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CutomerNameTable> CutomerNameTables
		{
			get
			{
				return this._CutomerNameTables;
			}
			set
			{
				this._CutomerNameTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CutomerNameTables(CutomerNameTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerAmountTable = this;
		}
		
		private void detach_CutomerNameTables(CutomerNameTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerAmountTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerContactTable")]
	public partial class CustomerContactTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Id;
		
		private int _CustomerID;
		
		private string _CustomerMobile;
		
		private string _CustomerEmail;
		
		private int _CustomerLocationID;
		
		private EntitySet<CutomerNameTable> _CutomerNameTables;
		
		private EntityRef<CustomerLocationTable> _CustomerLocationTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Nullable<int> value);
    partial void OnIdChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerMobileChanging(string value);
    partial void OnCustomerMobileChanged();
    partial void OnCustomerEmailChanging(string value);
    partial void OnCustomerEmailChanged();
    partial void OnCustomerLocationIDChanging(int value);
    partial void OnCustomerLocationIDChanged();
    #endregion
		
		public CustomerContactTable()
		{
			this._CutomerNameTables = new EntitySet<CutomerNameTable>(new Action<CutomerNameTable>(this.attach_CutomerNameTables), new Action<CutomerNameTable>(this.detach_CutomerNameTables));
			this._CustomerLocationTable = default(EntityRef<CustomerLocationTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int")]
		public System.Nullable<int> Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerMobile", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerMobile
		{
			get
			{
				return this._CustomerMobile;
			}
			set
			{
				if ((this._CustomerMobile != value))
				{
					this.OnCustomerMobileChanging(value);
					this.SendPropertyChanging();
					this._CustomerMobile = value;
					this.SendPropertyChanged("CustomerMobile");
					this.OnCustomerMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerEmail
		{
			get
			{
				return this._CustomerEmail;
			}
			set
			{
				if ((this._CustomerEmail != value))
				{
					this.OnCustomerEmailChanging(value);
					this.SendPropertyChanging();
					this._CustomerEmail = value;
					this.SendPropertyChanged("CustomerEmail");
					this.OnCustomerEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerLocationID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int CustomerLocationID
		{
			get
			{
				return this._CustomerLocationID;
			}
			set
			{
				if ((this._CustomerLocationID != value))
				{
					if (this._CustomerLocationTable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerLocationIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerLocationID = value;
					this.SendPropertyChanged("CustomerLocationID");
					this.OnCustomerLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerContactTable_CutomerNameTable", Storage="_CutomerNameTables", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CutomerNameTable> CutomerNameTables
		{
			get
			{
				return this._CutomerNameTables;
			}
			set
			{
				this._CutomerNameTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLocationTable_CustomerContactTable", Storage="_CustomerLocationTable", ThisKey="CustomerLocationID", OtherKey="CustomerLocationID", IsForeignKey=true)]
		public CustomerLocationTable CustomerLocationTable
		{
			get
			{
				return this._CustomerLocationTable.Entity;
			}
			set
			{
				CustomerLocationTable previousValue = this._CustomerLocationTable.Entity;
				if (((previousValue != value) 
							|| (this._CustomerLocationTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerLocationTable.Entity = null;
						previousValue.CustomerContactTables.Remove(this);
					}
					this._CustomerLocationTable.Entity = value;
					if ((value != null))
					{
						value.CustomerContactTables.Add(this);
						this._CustomerLocationID = value.CustomerLocationID;
					}
					else
					{
						this._CustomerLocationID = default(int);
					}
					this.SendPropertyChanged("CustomerLocationTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CutomerNameTables(CutomerNameTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerContactTable = this;
		}
		
		private void detach_CutomerNameTables(CutomerNameTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerContactTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerLocationTable")]
	public partial class CustomerLocationTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerLocationID;
		
		private string _CustomerArea;
		
		private string _CustomerLocation;
		
		private EntitySet<CustomerContactTable> _CustomerContactTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerLocationIDChanging(int value);
    partial void OnCustomerLocationIDChanged();
    partial void OnCustomerAreaChanging(string value);
    partial void OnCustomerAreaChanged();
    partial void OnCustomerLocationChanging(string value);
    partial void OnCustomerLocationChanged();
    #endregion
		
		public CustomerLocationTable()
		{
			this._CustomerContactTables = new EntitySet<CustomerContactTable>(new Action<CustomerContactTable>(this.attach_CustomerContactTables), new Action<CustomerContactTable>(this.detach_CustomerContactTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerLocationID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CustomerLocationID
		{
			get
			{
				return this._CustomerLocationID;
			}
			set
			{
				if ((this._CustomerLocationID != value))
				{
					this.OnCustomerLocationIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerLocationID = value;
					this.SendPropertyChanged("CustomerLocationID");
					this.OnCustomerLocationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerArea", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerArea
		{
			get
			{
				return this._CustomerArea;
			}
			set
			{
				if ((this._CustomerArea != value))
				{
					this.OnCustomerAreaChanging(value);
					this.SendPropertyChanging();
					this._CustomerArea = value;
					this.SendPropertyChanged("CustomerArea");
					this.OnCustomerAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerLocation", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string CustomerLocation
		{
			get
			{
				return this._CustomerLocation;
			}
			set
			{
				if ((this._CustomerLocation != value))
				{
					this.OnCustomerLocationChanging(value);
					this.SendPropertyChanging();
					this._CustomerLocation = value;
					this.SendPropertyChanged("CustomerLocation");
					this.OnCustomerLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerLocationTable_CustomerContactTable", Storage="_CustomerContactTables", ThisKey="CustomerLocationID", OtherKey="CustomerLocationID")]
		public EntitySet<CustomerContactTable> CustomerContactTables
		{
			get
			{
				return this._CustomerContactTables;
			}
			set
			{
				this._CustomerContactTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerContactTables(CustomerContactTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerLocationTable = this;
		}
		
		private void detach_CustomerContactTables(CustomerContactTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerLocationTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerNetInfoTAble")]
	public partial class CustomerNetInfoTAble : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private System.DateTime _CustomerStartDate;
		
		private string _CustomerPackageName;
		
		private string _CustomerIPAddress;
		
		private EntitySet<CutomerNameTable> _CutomerNameTables;
		
		private EntityRef<Packagetable> _Packagetable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerStartDateChanging(System.DateTime value);
    partial void OnCustomerStartDateChanged();
    partial void OnCustomerPackageNameChanging(string value);
    partial void OnCustomerPackageNameChanged();
    partial void OnCustomerIPAddressChanging(string value);
    partial void OnCustomerIPAddressChanged();
    #endregion
		
		public CustomerNetInfoTAble()
		{
			this._CutomerNameTables = new EntitySet<CutomerNameTable>(new Action<CutomerNameTable>(this.attach_CutomerNameTables), new Action<CutomerNameTable>(this.detach_CutomerNameTables));
			this._Packagetable = default(EntityRef<Packagetable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerStartDate", DbType="Date NOT NULL")]
		public System.DateTime CustomerStartDate
		{
			get
			{
				return this._CustomerStartDate;
			}
			set
			{
				if ((this._CustomerStartDate != value))
				{
					this.OnCustomerStartDateChanging(value);
					this.SendPropertyChanging();
					this._CustomerStartDate = value;
					this.SendPropertyChanged("CustomerStartDate");
					this.OnCustomerStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPackageName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerPackageName
		{
			get
			{
				return this._CustomerPackageName;
			}
			set
			{
				if ((this._CustomerPackageName != value))
				{
					if (this._Packagetable.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerPackageNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerPackageName = value;
					this.SendPropertyChanged("CustomerPackageName");
					this.OnCustomerPackageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerIPAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerIPAddress
		{
			get
			{
				return this._CustomerIPAddress;
			}
			set
			{
				if ((this._CustomerIPAddress != value))
				{
					this.OnCustomerIPAddressChanging(value);
					this.SendPropertyChanging();
					this._CustomerIPAddress = value;
					this.SendPropertyChanged("CustomerIPAddress");
					this.OnCustomerIPAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerNetInfoTAble_CutomerNameTable", Storage="_CutomerNameTables", ThisKey="CustomerID", OtherKey="CustomerID")]
		public EntitySet<CutomerNameTable> CutomerNameTables
		{
			get
			{
				return this._CutomerNameTables;
			}
			set
			{
				this._CutomerNameTables.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Packagetable_CustomerNetInfoTAble", Storage="_Packagetable", ThisKey="CustomerPackageName", OtherKey="CustomerPackageName", IsForeignKey=true)]
		public Packagetable Packagetable
		{
			get
			{
				return this._Packagetable.Entity;
			}
			set
			{
				Packagetable previousValue = this._Packagetable.Entity;
				if (((previousValue != value) 
							|| (this._Packagetable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Packagetable.Entity = null;
						previousValue.CustomerNetInfoTAbles.Remove(this);
					}
					this._Packagetable.Entity = value;
					if ((value != null))
					{
						value.CustomerNetInfoTAbles.Add(this);
						this._CustomerPackageName = value.CustomerPackageName;
					}
					else
					{
						this._CustomerPackageName = default(string);
					}
					this.SendPropertyChanged("Packagetable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CutomerNameTables(CutomerNameTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerNetInfoTAble = this;
		}
		
		private void detach_CutomerNameTables(CutomerNameTable entity)
		{
			this.SendPropertyChanging();
			entity.CustomerNetInfoTAble = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CustomerPaidTable")]
	public partial class CustomerPaidTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CustomerID;
		
		private string _CustomerYear;
		
		private string _CustomerMonth;
		
		private string _PaidStatus;
		
		private int _id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    partial void OnCustomerYearChanging(string value);
    partial void OnCustomerYearChanged();
    partial void OnCustomerMonthChanging(string value);
    partial void OnCustomerMonthChanged();
    partial void OnPaidStatusChanging(string value);
    partial void OnPaidStatusChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public CustomerPaidTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerYear", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerYear
		{
			get
			{
				return this._CustomerYear;
			}
			set
			{
				if ((this._CustomerYear != value))
				{
					this.OnCustomerYearChanging(value);
					this.SendPropertyChanging();
					this._CustomerYear = value;
					this.SendPropertyChanged("CustomerYear");
					this.OnCustomerYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerMonth", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerMonth
		{
			get
			{
				return this._CustomerMonth;
			}
			set
			{
				if ((this._CustomerMonth != value))
				{
					this.OnCustomerMonthChanging(value);
					this.SendPropertyChanging();
					this._CustomerMonth = value;
					this.SendPropertyChanged("CustomerMonth");
					this.OnCustomerMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidStatus", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PaidStatus
		{
			get
			{
				return this._PaidStatus;
			}
			set
			{
				if ((this._PaidStatus != value))
				{
					this.OnPaidStatusChanging(value);
					this.SendPropertyChanging();
					this._PaidStatus = value;
					this.SendPropertyChanged("PaidStatus");
					this.OnPaidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CutomerNameTable")]
	public partial class CutomerNameTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _CustomerName;
		
		private string _CustomreNID;
		
		private int _CustomerID;
		
		private EntityRef<CustomerContactTable> _CustomerContactTable;
		
		private EntityRef<CustomerNetInfoTAble> _CustomerNetInfoTAble;
		
		private EntityRef<CustomerAmountTable> _CustomerAmountTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCustomerNameChanging(string value);
    partial void OnCustomerNameChanged();
    partial void OnCustomreNIDChanging(string value);
    partial void OnCustomreNIDChanged();
    partial void OnCustomerIDChanging(int value);
    partial void OnCustomerIDChanged();
    #endregion
		
		public CutomerNameTable()
		{
			this._CustomerContactTable = default(EntityRef<CustomerContactTable>);
			this._CustomerNetInfoTAble = default(EntityRef<CustomerNetInfoTAble>);
			this._CustomerAmountTable = default(EntityRef<CustomerAmountTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomerName
		{
			get
			{
				return this._CustomerName;
			}
			set
			{
				if ((this._CustomerName != value))
				{
					this.OnCustomerNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerName = value;
					this.SendPropertyChanged("CustomerName");
					this.OnCustomerNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomreNID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CustomreNID
		{
			get
			{
				return this._CustomreNID;
			}
			set
			{
				if ((this._CustomreNID != value))
				{
					this.OnCustomreNIDChanging(value);
					this.SendPropertyChanging();
					this._CustomreNID = value;
					this.SendPropertyChanged("CustomreNID");
					this.OnCustomreNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerID", DbType="Int NOT NULL")]
		public int CustomerID
		{
			get
			{
				return this._CustomerID;
			}
			set
			{
				if ((this._CustomerID != value))
				{
					if (((this._CustomerContactTable.HasLoadedOrAssignedValue || this._CustomerNetInfoTAble.HasLoadedOrAssignedValue) 
								|| this._CustomerAmountTable.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCustomerIDChanging(value);
					this.SendPropertyChanging();
					this._CustomerID = value;
					this.SendPropertyChanged("CustomerID");
					this.OnCustomerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerContactTable_CutomerNameTable", Storage="_CustomerContactTable", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public CustomerContactTable CustomerContactTable
		{
			get
			{
				return this._CustomerContactTable.Entity;
			}
			set
			{
				CustomerContactTable previousValue = this._CustomerContactTable.Entity;
				if (((previousValue != value) 
							|| (this._CustomerContactTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerContactTable.Entity = null;
						previousValue.CutomerNameTables.Remove(this);
					}
					this._CustomerContactTable.Entity = value;
					if ((value != null))
					{
						value.CutomerNameTables.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("CustomerContactTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerNetInfoTAble_CutomerNameTable", Storage="_CustomerNetInfoTAble", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public CustomerNetInfoTAble CustomerNetInfoTAble
		{
			get
			{
				return this._CustomerNetInfoTAble.Entity;
			}
			set
			{
				CustomerNetInfoTAble previousValue = this._CustomerNetInfoTAble.Entity;
				if (((previousValue != value) 
							|| (this._CustomerNetInfoTAble.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerNetInfoTAble.Entity = null;
						previousValue.CutomerNameTables.Remove(this);
					}
					this._CustomerNetInfoTAble.Entity = value;
					if ((value != null))
					{
						value.CutomerNameTables.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("CustomerNetInfoTAble");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CustomerAmountTable_CutomerNameTable", Storage="_CustomerAmountTable", ThisKey="CustomerID", OtherKey="CustomerID", IsForeignKey=true)]
		public CustomerAmountTable CustomerAmountTable
		{
			get
			{
				return this._CustomerAmountTable.Entity;
			}
			set
			{
				CustomerAmountTable previousValue = this._CustomerAmountTable.Entity;
				if (((previousValue != value) 
							|| (this._CustomerAmountTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CustomerAmountTable.Entity = null;
						previousValue.CutomerNameTables.Remove(this);
					}
					this._CustomerAmountTable.Entity = value;
					if ((value != null))
					{
						value.CutomerNameTables.Add(this);
						this._CustomerID = value.CustomerID;
					}
					else
					{
						this._CustomerID = default(int);
					}
					this.SendPropertyChanged("CustomerAmountTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeContactInfoTable")]
	public partial class EmployeeContactInfoTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeNID;
		
		private string _EmployeeMobile;
		
		private string _EmployeeEmail;
		
		private string _EmployeeAddress;
		
		private EntitySet<EmployeeNameTable> _EmployeeNameTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNIDChanging(string value);
    partial void OnEmployeeNIDChanged();
    partial void OnEmployeeMobileChanging(string value);
    partial void OnEmployeeMobileChanged();
    partial void OnEmployeeEmailChanging(string value);
    partial void OnEmployeeEmailChanged();
    partial void OnEmployeeAddressChanging(string value);
    partial void OnEmployeeAddressChanged();
    #endregion
		
		public EmployeeContactInfoTable()
		{
			this._EmployeeNameTables = new EntitySet<EmployeeNameTable>(new Action<EmployeeNameTable>(this.attach_EmployeeNameTables), new Action<EmployeeNameTable>(this.detach_EmployeeNameTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeNID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeNID
		{
			get
			{
				return this._EmployeeNID;
			}
			set
			{
				if ((this._EmployeeNID != value))
				{
					this.OnEmployeeNIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeNID = value;
					this.SendPropertyChanged("EmployeeNID");
					this.OnEmployeeNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeMobile", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeMobile
		{
			get
			{
				return this._EmployeeMobile;
			}
			set
			{
				if ((this._EmployeeMobile != value))
				{
					this.OnEmployeeMobileChanging(value);
					this.SendPropertyChanging();
					this._EmployeeMobile = value;
					this.SendPropertyChanged("EmployeeMobile");
					this.OnEmployeeMobileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeEmail", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeEmail
		{
			get
			{
				return this._EmployeeEmail;
			}
			set
			{
				if ((this._EmployeeEmail != value))
				{
					this.OnEmployeeEmailChanging(value);
					this.SendPropertyChanging();
					this._EmployeeEmail = value;
					this.SendPropertyChanged("EmployeeEmail");
					this.OnEmployeeEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeAddress", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeAddress
		{
			get
			{
				return this._EmployeeAddress;
			}
			set
			{
				if ((this._EmployeeAddress != value))
				{
					this.OnEmployeeAddressChanging(value);
					this.SendPropertyChanging();
					this._EmployeeAddress = value;
					this.SendPropertyChanged("EmployeeAddress");
					this.OnEmployeeAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeContactInfoTable_EmployeeNameTable", Storage="_EmployeeNameTables", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeNameTable> EmployeeNameTables
		{
			get
			{
				return this._EmployeeNameTables;
			}
			set
			{
				this._EmployeeNameTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeNameTables(EmployeeNameTable entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeContactInfoTable = this;
		}
		
		private void detach_EmployeeNameTables(EmployeeNameTable entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeContactInfoTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeJoinDateTable")]
	public partial class EmployeeJoinDateTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private System.DateTime _EmployeeJoinDate;
		
		private EntitySet<EmployeeNameTable> _EmployeeNameTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeJoinDateChanging(System.DateTime value);
    partial void OnEmployeeJoinDateChanged();
    #endregion
		
		public EmployeeJoinDateTable()
		{
			this._EmployeeNameTables = new EntitySet<EmployeeNameTable>(new Action<EmployeeNameTable>(this.attach_EmployeeNameTables), new Action<EmployeeNameTable>(this.detach_EmployeeNameTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeJoinDate", DbType="Date NOT NULL")]
		public System.DateTime EmployeeJoinDate
		{
			get
			{
				return this._EmployeeJoinDate;
			}
			set
			{
				if ((this._EmployeeJoinDate != value))
				{
					this.OnEmployeeJoinDateChanging(value);
					this.SendPropertyChanging();
					this._EmployeeJoinDate = value;
					this.SendPropertyChanged("EmployeeJoinDate");
					this.OnEmployeeJoinDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeJoinDateTable_EmployeeNameTable", Storage="_EmployeeNameTables", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeNameTable> EmployeeNameTables
		{
			get
			{
				return this._EmployeeNameTables;
			}
			set
			{
				this._EmployeeNameTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeNameTables(EmployeeNameTable entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeJoinDateTable = this;
		}
		
		private void detach_EmployeeNameTables(EmployeeNameTable entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeJoinDateTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeNameTable")]
	public partial class EmployeeNameTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		private string _EmployeePassword;
		
		private string _EmployeeModeratorAccess;
		
		private int _id;
		
		private EntityRef<EmployeeJoinDateTable> _EmployeeJoinDateTable;
		
		private EntityRef<EmployeeContactInfoTable> _EmployeeContactInfoTable;
		
		private EntityRef<EmployeeSalaryTable> _EmployeeSalaryTable;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmployeePasswordChanging(string value);
    partial void OnEmployeePasswordChanged();
    partial void OnEmployeeModeratorAccessChanging(string value);
    partial void OnEmployeeModeratorAccessChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public EmployeeNameTable()
		{
			this._EmployeeJoinDateTable = default(EntityRef<EmployeeJoinDateTable>);
			this._EmployeeContactInfoTable = default(EntityRef<EmployeeContactInfoTable>);
			this._EmployeeSalaryTable = default(EntityRef<EmployeeSalaryTable>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					if (((this._EmployeeJoinDateTable.HasLoadedOrAssignedValue || this._EmployeeContactInfoTable.HasLoadedOrAssignedValue) 
								|| this._EmployeeSalaryTable.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeePassword", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeePassword
		{
			get
			{
				return this._EmployeePassword;
			}
			set
			{
				if ((this._EmployeePassword != value))
				{
					this.OnEmployeePasswordChanging(value);
					this.SendPropertyChanging();
					this._EmployeePassword = value;
					this.SendPropertyChanged("EmployeePassword");
					this.OnEmployeePasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeModeratorAccess", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeModeratorAccess
		{
			get
			{
				return this._EmployeeModeratorAccess;
			}
			set
			{
				if ((this._EmployeeModeratorAccess != value))
				{
					this.OnEmployeeModeratorAccessChanging(value);
					this.SendPropertyChanging();
					this._EmployeeModeratorAccess = value;
					this.SendPropertyChanged("EmployeeModeratorAccess");
					this.OnEmployeeModeratorAccessChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeJoinDateTable_EmployeeNameTable", Storage="_EmployeeJoinDateTable", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public EmployeeJoinDateTable EmployeeJoinDateTable
		{
			get
			{
				return this._EmployeeJoinDateTable.Entity;
			}
			set
			{
				EmployeeJoinDateTable previousValue = this._EmployeeJoinDateTable.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeJoinDateTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeJoinDateTable.Entity = null;
						previousValue.EmployeeNameTables.Remove(this);
					}
					this._EmployeeJoinDateTable.Entity = value;
					if ((value != null))
					{
						value.EmployeeNameTables.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("EmployeeJoinDateTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeContactInfoTable_EmployeeNameTable", Storage="_EmployeeContactInfoTable", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public EmployeeContactInfoTable EmployeeContactInfoTable
		{
			get
			{
				return this._EmployeeContactInfoTable.Entity;
			}
			set
			{
				EmployeeContactInfoTable previousValue = this._EmployeeContactInfoTable.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeContactInfoTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeContactInfoTable.Entity = null;
						previousValue.EmployeeNameTables.Remove(this);
					}
					this._EmployeeContactInfoTable.Entity = value;
					if ((value != null))
					{
						value.EmployeeNameTables.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("EmployeeContactInfoTable");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeSalaryTable_EmployeeNameTable", Storage="_EmployeeSalaryTable", ThisKey="EmployeeID", OtherKey="EmployeeID", IsForeignKey=true)]
		public EmployeeSalaryTable EmployeeSalaryTable
		{
			get
			{
				return this._EmployeeSalaryTable.Entity;
			}
			set
			{
				EmployeeSalaryTable previousValue = this._EmployeeSalaryTable.Entity;
				if (((previousValue != value) 
							|| (this._EmployeeSalaryTable.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._EmployeeSalaryTable.Entity = null;
						previousValue.EmployeeNameTables.Remove(this);
					}
					this._EmployeeSalaryTable.Entity = value;
					if ((value != null))
					{
						value.EmployeeNameTables.Add(this);
						this._EmployeeID = value.EmployeeID;
					}
					else
					{
						this._EmployeeID = default(int);
					}
					this.SendPropertyChanged("EmployeeSalaryTable");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeSalaryManage")]
	public partial class EmployeeSalaryManage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _EmployeeName;
		
		private string _EmployeeSalaryYear;
		
		private string _EmployeeSalaryMonth;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeNameChanging(string value);
    partial void OnEmployeeNameChanged();
    partial void OnEmployeeSalaryYearChanging(string value);
    partial void OnEmployeeSalaryYearChanged();
    partial void OnEmployeeSalaryMonthChanging(string value);
    partial void OnEmployeeSalaryMonthChanged();
    #endregion
		
		public EmployeeSalaryManage()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string EmployeeName
		{
			get
			{
				return this._EmployeeName;
			}
			set
			{
				if ((this._EmployeeName != value))
				{
					this.OnEmployeeNameChanging(value);
					this.SendPropertyChanging();
					this._EmployeeName = value;
					this.SendPropertyChanged("EmployeeName");
					this.OnEmployeeNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSalaryYear", DbType="VarChar(50)")]
		public string EmployeeSalaryYear
		{
			get
			{
				return this._EmployeeSalaryYear;
			}
			set
			{
				if ((this._EmployeeSalaryYear != value))
				{
					this.OnEmployeeSalaryYearChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSalaryYear = value;
					this.SendPropertyChanged("EmployeeSalaryYear");
					this.OnEmployeeSalaryYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSalaryMonth", DbType="VarChar(50)")]
		public string EmployeeSalaryMonth
		{
			get
			{
				return this._EmployeeSalaryMonth;
			}
			set
			{
				if ((this._EmployeeSalaryMonth != value))
				{
					this.OnEmployeeSalaryMonthChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSalaryMonth = value;
					this.SendPropertyChanged("EmployeeSalaryMonth");
					this.OnEmployeeSalaryMonthChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeSalaryTable")]
	public partial class EmployeeSalaryTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private double _EmployeeSalary;
		
		private EntitySet<EmployeeNameTable> _EmployeeNameTables;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnEmployeeSalaryChanging(double value);
    partial void OnEmployeeSalaryChanged();
    #endregion
		
		public EmployeeSalaryTable()
		{
			this._EmployeeNameTables = new EntitySet<EmployeeNameTable>(new Action<EmployeeNameTable>(this.attach_EmployeeNameTables), new Action<EmployeeNameTable>(this.detach_EmployeeNameTables));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeSalary", DbType="Float NOT NULL")]
		public double EmployeeSalary
		{
			get
			{
				return this._EmployeeSalary;
			}
			set
			{
				if ((this._EmployeeSalary != value))
				{
					this.OnEmployeeSalaryChanging(value);
					this.SendPropertyChanging();
					this._EmployeeSalary = value;
					this.SendPropertyChanged("EmployeeSalary");
					this.OnEmployeeSalaryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="EmployeeSalaryTable_EmployeeNameTable", Storage="_EmployeeNameTables", ThisKey="EmployeeID", OtherKey="EmployeeID")]
		public EntitySet<EmployeeNameTable> EmployeeNameTables
		{
			get
			{
				return this._EmployeeNameTables;
			}
			set
			{
				this._EmployeeNameTables.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_EmployeeNameTables(EmployeeNameTable entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeSalaryTable = this;
		}
		
		private void detach_EmployeeNameTables(EmployeeNameTable entity)
		{
			this.SendPropertyChanging();
			entity.EmployeeSalaryTable = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EmployeeSalaryUpdateTable")]
	public partial class EmployeeSalaryUpdateTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EmployeeID;
		
		private string _Year;
		
		private string _Month;
		
		private string _PaidStatus;
		
		private int _id;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEmployeeIDChanging(int value);
    partial void OnEmployeeIDChanged();
    partial void OnYearChanging(string value);
    partial void OnYearChanged();
    partial void OnMonthChanging(string value);
    partial void OnMonthChanged();
    partial void OnPaidStatusChanging(string value);
    partial void OnPaidStatusChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public EmployeeSalaryUpdateTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmployeeID", DbType="Int NOT NULL")]
		public int EmployeeID
		{
			get
			{
				return this._EmployeeID;
			}
			set
			{
				if ((this._EmployeeID != value))
				{
					this.OnEmployeeIDChanging(value);
					this.SendPropertyChanging();
					this._EmployeeID = value;
					this.SendPropertyChanged("EmployeeID");
					this.OnEmployeeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="VarChar(50)")]
		public string Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="VarChar(50)")]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PaidStatus", DbType="VarChar(50)")]
		public string PaidStatus
		{
			get
			{
				return this._PaidStatus;
			}
			set
			{
				if ((this._PaidStatus != value))
				{
					this.OnPaidStatusChanging(value);
					this.SendPropertyChanging();
					this._PaidStatus = value;
					this.SendPropertyChanged("PaidStatus");
					this.OnPaidStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExpenTable")]
	public partial class ExpenTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _ExpenditureNumber;
		
		private string _ExpenditureType;
		
		private string _ExpenditureName;
		
		private int _Year;
		
		private string _Month;
		
		private double _Amount;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnExpenditureNumberChanging(string value);
    partial void OnExpenditureNumberChanged();
    partial void OnExpenditureTypeChanging(string value);
    partial void OnExpenditureTypeChanged();
    partial void OnExpenditureNameChanging(string value);
    partial void OnExpenditureNameChanged();
    partial void OnYearChanging(int value);
    partial void OnYearChanged();
    partial void OnMonthChanging(string value);
    partial void OnMonthChanged();
    partial void OnAmountChanging(double value);
    partial void OnAmountChanged();
    #endregion
		
		public ExpenTable()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenditureNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExpenditureNumber
		{
			get
			{
				return this._ExpenditureNumber;
			}
			set
			{
				if ((this._ExpenditureNumber != value))
				{
					this.OnExpenditureNumberChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureNumber = value;
					this.SendPropertyChanged("ExpenditureNumber");
					this.OnExpenditureNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenditureType", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExpenditureType
		{
			get
			{
				return this._ExpenditureType;
			}
			set
			{
				if ((this._ExpenditureType != value))
				{
					this.OnExpenditureTypeChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureType = value;
					this.SendPropertyChanged("ExpenditureType");
					this.OnExpenditureTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpenditureName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string ExpenditureName
		{
			get
			{
				return this._ExpenditureName;
			}
			set
			{
				if ((this._ExpenditureName != value))
				{
					this.OnExpenditureNameChanging(value);
					this.SendPropertyChanging();
					this._ExpenditureName = value;
					this.SendPropertyChanged("ExpenditureName");
					this.OnExpenditureNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Year", DbType="Int NOT NULL")]
		public int Year
		{
			get
			{
				return this._Year;
			}
			set
			{
				if ((this._Year != value))
				{
					this.OnYearChanging(value);
					this.SendPropertyChanging();
					this._Year = value;
					this.SendPropertyChanged("Year");
					this.OnYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Month", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Month
		{
			get
			{
				return this._Month;
			}
			set
			{
				if ((this._Month != value))
				{
					this.OnMonthChanging(value);
					this.SendPropertyChanging();
					this._Month = value;
					this.SendPropertyChanged("Month");
					this.OnMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Amount", DbType="Float NOT NULL")]
		public double Amount
		{
			get
			{
				return this._Amount;
			}
			set
			{
				if ((this._Amount != value))
				{
					this.OnAmountChanging(value);
					this.SendPropertyChanging();
					this._Amount = value;
					this.SendPropertyChanged("Amount");
					this.OnAmountChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Packagetable")]
	public partial class Packagetable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _CustomerPackageName;
		
		private string _PackageSpeed;
		
		private double _PackagePrice;
		
		private int _id;
		
		private EntitySet<CustomerNetInfoTAble> _CustomerNetInfoTAbles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCustomerPackageNameChanging(string value);
    partial void OnCustomerPackageNameChanged();
    partial void OnPackageSpeedChanging(string value);
    partial void OnPackageSpeedChanged();
    partial void OnPackagePriceChanging(double value);
    partial void OnPackagePriceChanged();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    #endregion
		
		public Packagetable()
		{
			this._CustomerNetInfoTAbles = new EntitySet<CustomerNetInfoTAble>(new Action<CustomerNetInfoTAble>(this.attach_CustomerNetInfoTAbles), new Action<CustomerNetInfoTAble>(this.detach_CustomerNetInfoTAbles));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CustomerPackageName", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string CustomerPackageName
		{
			get
			{
				return this._CustomerPackageName;
			}
			set
			{
				if ((this._CustomerPackageName != value))
				{
					this.OnCustomerPackageNameChanging(value);
					this.SendPropertyChanging();
					this._CustomerPackageName = value;
					this.SendPropertyChanged("CustomerPackageName");
					this.OnCustomerPackageNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageSpeed", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string PackageSpeed
		{
			get
			{
				return this._PackageSpeed;
			}
			set
			{
				if ((this._PackageSpeed != value))
				{
					this.OnPackageSpeedChanging(value);
					this.SendPropertyChanging();
					this._PackageSpeed = value;
					this.SendPropertyChanged("PackageSpeed");
					this.OnPackageSpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackagePrice", DbType="Float NOT NULL")]
		public double PackagePrice
		{
			get
			{
				return this._PackagePrice;
			}
			set
			{
				if ((this._PackagePrice != value))
				{
					this.OnPackagePriceChanging(value);
					this.SendPropertyChanging();
					this._PackagePrice = value;
					this.SendPropertyChanged("PackagePrice");
					this.OnPackagePriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Packagetable_CustomerNetInfoTAble", Storage="_CustomerNetInfoTAbles", ThisKey="CustomerPackageName", OtherKey="CustomerPackageName")]
		public EntitySet<CustomerNetInfoTAble> CustomerNetInfoTAbles
		{
			get
			{
				return this._CustomerNetInfoTAbles;
			}
			set
			{
				this._CustomerNetInfoTAbles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CustomerNetInfoTAbles(CustomerNetInfoTAble entity)
		{
			this.SendPropertyChanging();
			entity.Packagetable = this;
		}
		
		private void detach_CustomerNetInfoTAbles(CustomerNetInfoTAble entity)
		{
			this.SendPropertyChanging();
			entity.Packagetable = null;
		}
	}
}
#pragma warning restore 1591
